blueprint:
  name: Smart Motion-Controlled Lighting
  description: >-
    Automatically turns lights on when motion is detected and off when no motion is present.
    Features include auto-off timer and multiple motion sensor support.
  domain: automation
  input:
    motion_sensors:
      name: Motion Sensors
      description: Select one or more motion sensors to control the lights
      selector:
        target:
          entity:
            domain: binary_sensor
            device_class: motion
    light_entities:
      name: Lights to Control
      description: Select the lights you want to automatically control
      selector:
        target:
          entity:
            domain: light
    timer_entity:
      name: Timer Helper
      description: Select a timer helper to manage the auto-off delay
      selector:
        entity:
          domain: timer
    auto_off_duration:
      name: Auto-Off Delay (Optional)
      description: How long to wait before turning off lights after motion stops (leave empty for immediate turn-off)
      default: ""
      selector:
        duration:

alias: "{{ blueprint.name }}"
description: "{{ blueprint.description }}"

triggers:
  - entity_id: !input motion_sensors
    id: motion_detected
    trigger: state
    to: "on"
  - entity_id: !input motion_sensors
    id: motion_clear
    trigger: state
    to: "off"
  - trigger: state
    entity_id: !input light_entities
    to: "on"
    id: light_on
  - entity_id: !input timer_entity
    id: timer_finished
    trigger: state
    to: idle
    from: active

actions:
  - choose:
      - conditions:
          - condition: trigger
            id: motion_detected
          - condition: template
            value_template: >-
              {% set lights_off = namespace(count=0) %}
              {% for entity_id in light_entities %}
                {% if states(entity_id) == 'off' %}
                  {% set lights_off.count = lights_off.count + 1 %}
                {% endif %}
              {% endfor %}
              {{ lights_off.count > 0 }}
        sequence:
          - target: !input light_entities
            action: light.turn_on
            data: {}
          - action: timer.cancel
            target:
              entity_id: !input timer_entity

      - conditions:
          - condition: trigger
            id:
              - motion_clear
              - light_on
          - condition: template
            value_template: >-
              {% set lights_on = namespace(count=0) %}
              {% for entity_id in light_entities %}
                {% if states(entity_id) == 'on' %}
                  {% set lights_on.count = lights_on.count + 1 %}
                {% endif %}
              {% endfor %}
              {{ lights_on.count > 0 }}
          - condition: template
            value_template: >-
              {% set any_motion = false %}
              {% for entity_id in motion_sensors %}
                {% if states(entity_id) == 'on' %}
                  {% set any_motion = true %}
                {% endif %}
              {% endfor %}
              {{ not any_motion }}
        sequence:
          - action: timer.start
            data:
              duration: !input auto_off_duration
            target:
              entity_id: !input timer_entity

      - conditions:
          - condition: trigger
            id: timer_finished
        sequence:
          - condition: template
            value_template: >-
              {% set any_motion = false %}
              {% for entity_id in motion_sensors %}
                {% if states(entity_id) == 'on' %}
                  {% set any_motion = true %}
                {% endif %}
              {% endfor %}
              {{ not any_motion }}
          - condition: template
            value_template: >-
              {% set lights_on = namespace(count=0) %}
              {% for entity_id in light_entities %}
                {% if states(entity_id) == 'on' %}
                  {% set lights_on.count = lights_on.count + 1 %}
                {% endif %}
              {% endfor %}
              {{ lights_on.count > 0 }}
          - target: !input light_entities
            action: light.turn_off
            data: {}

mode: restart
max_exceeded: silent
